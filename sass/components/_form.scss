.form {
    &__group:not(:last-child) {
        margin-bottom: 2rem;
    }

    &__input {
        font-size: 1.5rem;
        font-family: inherit;
        color: inherit;
        padding: 1.5rem 2rem;
        border-radius: 2px;
        background-color: rgba($color-white, .5);
        border: none;
        border-bottom: 3px solid transparent;
        width: 90%;
        display: block;
        transition: all .3s;

        &:focus {
            outline: none;
            box-shadow: 0 1rem 2rem rgba($color-black, .1);
            border-bottom: 3px solid $color-primary;
        }

        &:focus:invalid { // Checking for invalid input form
            border-bottom: 3px solid $color-secondary-dark;
        }

        &::-webkit-input-placeholder {  // work only chrome and safari
            color: $color-grey-dark-2;
        }

    }

    &__label {
        font-size: 1.2rem;
        font-weight: 700;
        margin-left: 2rem;
        margin-top: .7rem;
        display: block;
        transition: all .3s;
    }


    // normally it wont work because label isnt input child, but sibling.
    // however we can use selector called sibling selector (Adjection sibling) 
    // with this sign + (next to element) or ~ (After some more elements such as div btn etc)
    // However to use sibling selector, we must first declaire the input and then label in out HTML code otherwise, it wont work
    &__input:placeholder-shown + &__label {  
        opacity: 0;
        visibility: hidden; // why dont we just use visibility hidden without opacity, because we can not animate the visibility
        transform: translateY(-4rem);
    }

    &__radio-group {
        width: 49%;
        display: inline-block;
    }

    // Hide radio input element
    &__radio-input {
        display: none;
    }

    &__radio-label {
        font-size: $default-font-size;
        cursor: pointer; // This basically to make it looks like a link
        position: relative;
        padding-left: 4.5rem;
    }

    &__radio-button {
        height: 3rem;  // height and width, this will work only if we have block or inline block element
        width: 3rem;
        border: 5px solid $color-primary;
        border-radius: 50%;
        display: inline-block;
        position: absolute;
        left: 0;
        top: -.4rem;

        &::after {
            content: "";
            display: block;
            height: 1.3rem;
            width: 1.3rem;
            border-radius: 50%;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: $color-primary;
            opacity: 0;
            transition: opacity .2s;
        }
    }

    // Again implementing adjection sibling
    // As soon as we hit the lable element
    // The radio input become checked, so we have the checked pseudo-class available to us
    // and what we do then is to simply select the sibling of that one, and then the child
    // because that the one we want to change, each time that the radio input is selected
    &__radio-input:checked ~ &__radio-label &__radio-button::after {
        opacity: 1;
    }
}